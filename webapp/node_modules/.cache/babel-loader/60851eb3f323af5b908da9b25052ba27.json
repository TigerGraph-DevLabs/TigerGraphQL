{"ast":null,"code":"var _jsxFileName = \"/Users/yand/dev/tigergraph/graphql/simpleapp/myapp/src/PersonViewer.js\";\nimport React from 'react';\nimport gql from 'graphql-tag';\nimport { Query } from 'react-apollo';\nimport { Table } from 'reactstrap';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const GET_POSTS = gql`\n  query GetPersons {\n    {DemoGraph\n        {person (\n            order_by : {name : asc})\n            {name,\n            gender,\n            height}\n        }\n    }\n  }\n`;\nexport default (() => /*#__PURE__*/_jsxDEV(Query, {\n  query: GET_POSTS,\n  children: _ref => {\n    let {\n      loading,\n      data\n    } = _ref;\n    return !loading && /*#__PURE__*/_jsxDEV(Table, {\n      children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n        children: /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: [/*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Author\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 27,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Body\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 28,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 26,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 25,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n        children: data.posts.map(post => /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: [/*#__PURE__*/_jsxDEV(\"td\", {\n            children: post.author\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 34,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n            children: post.body\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 35,\n            columnNumber: 17\n          }, this)]\n        }, post.id, true, {\n          fileName: _jsxFileName,\n          lineNumber: 33,\n          columnNumber: 15\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 31,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 9\n    }, this);\n  }\n}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 22,\n  columnNumber: 5\n}, this));","map":{"version":3,"sources":["/Users/yand/dev/tigergraph/graphql/simpleapp/myapp/src/PersonViewer.js"],"names":["React","gql","Query","Table","GET_POSTS","loading","data","posts","map","post","author","body","id"],"mappings":";AAEA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,GAAP,MAAgB,aAAhB;AACA,SAASC,KAAT,QAAsB,cAAtB;AACA,SAASC,KAAT,QAAsB,YAAtB;;AAEA,OAAO,MAAMC,SAAS,GAAGH,GAAI;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAXO;AAaP,gBAAe,mBACX,QAAC,KAAD;AAAO,EAAA,KAAK,EAAEG,SAAd;AAAA,YACG;AAAA,QAAC;AAAEC,MAAAA,OAAF;AAAWC,MAAAA;AAAX,KAAD;AAAA,WAAuB,CAACD,OAAD,iBACtB,QAAC,KAAD;AAAA,8BACE;AAAA,+BACE;AAAA,kCACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBADF,eAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAFF;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,cADF,eAOE;AAAA,kBACGC,IAAI,CAACC,KAAL,CAAWC,GAAX,CAAeC,IAAI,iBAClB;AAAA,kCACE;AAAA,sBAAKA,IAAI,CAACC;AAAV;AAAA;AAAA;AAAA;AAAA,kBADF,eAEE;AAAA,sBAAKD,IAAI,CAACE;AAAV;AAAA;AAAA;AAAA;AAAA,kBAFF;AAAA,WAASF,IAAI,CAACG,EAAd;AAAA;AAAA;AAAA;AAAA,gBADD;AADH;AAAA;AAAA;AAAA;AAAA,cAPF;AAAA;AAAA;AAAA;AAAA;AAAA,YADD;AAAA;AADH;AAAA;AAAA;AAAA;AAAA,QADJ","sourcesContent":["\n\nimport React from 'react';\nimport gql from 'graphql-tag';\nimport { Query } from 'react-apollo';\nimport { Table } from 'reactstrap';\n\nexport const GET_POSTS = gql`\n  query GetPersons {\n    {DemoGraph\n        {person (\n            order_by : {name : asc})\n            {name,\n            gender,\n            height}\n        }\n    }\n  }\n`;\n\nexport default () => (\n    <Query query={GET_POSTS}>\n      {({ loading, data }) => !loading && (\n        <Table>\n          <thead>\n            <tr>\n              <th>Author</th>\n              <th>Body</th>\n            </tr>\n          </thead>\n          <tbody>\n            {data.posts.map(post => (\n              <tr key={post.id}>\n                <td>{post.author}</td>\n                <td>{post.body}</td>\n              </tr>\n            ))}\n          </tbody>\n        </Table>\n      )}\n    </Query>\n  );"]},"metadata":{},"sourceType":"module"}