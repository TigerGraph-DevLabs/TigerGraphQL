{"ast":null,"code":"import { ApolloClient, InMemoryCache, HttpLink, from } from \"@apollo/client\";\nimport { onError } from \"@apollo/client/link/error\";\nconst httpLink = new HttpLink({\n  uri: \"http://localhost:8080/\"\n});\nconst errorLink = onError(_ref => {\n  let {\n    graphQLErrors,\n    networkError\n  } = _ref;\n  if (graphQLErrors) graphQLErrors.forEach(_ref2 => {\n    let {\n      message,\n      locations,\n      path\n    } = _ref2;\n    return console.log(`[GraphQL error]: Message: ${message}, Location: ${locations}, Path: ${path}`);\n  });\n  if (networkError) console.log(`[Network error]: ${networkError}`);\n}); // If you provide a link chain to ApolloClient, you\n// don't provide the `uri` option.\n\nconst client = new ApolloClient({\n  // The `from` function combines an array of individual links\n  // into a link chain\n  link: from([errorLink, httpLink]),\n  cache: new InMemoryCache()\n});","map":{"version":3,"sources":["/Users/yand/dev/tigergraph/graphql/simpleapp/myapp/src/apollo.js"],"names":["ApolloClient","InMemoryCache","HttpLink","from","onError","httpLink","uri","errorLink","graphQLErrors","networkError","forEach","message","locations","path","console","log","client","link","cache"],"mappings":"AAAA,SAASA,YAAT,EAAuBC,aAAvB,EAAsCC,QAAtC,EAAgDC,IAAhD,QAA4D,gBAA5D;AACA,SAASC,OAAT,QAAwB,2BAAxB;AAEA,MAAMC,QAAQ,GAAG,IAAIH,QAAJ,CAAa;AAC5BI,EAAAA,GAAG,EAAE;AADuB,CAAb,CAAjB;AAIA,MAAMC,SAAS,GAAGH,OAAO,CAAC,QAAqC;AAAA,MAApC;AAAEI,IAAAA,aAAF;AAAiBC,IAAAA;AAAjB,GAAoC;AAC7D,MAAID,aAAJ,EACEA,aAAa,CAACE,OAAd,CAAsB;AAAA,QAAC;AAAEC,MAAAA,OAAF;AAAWC,MAAAA,SAAX;AAAsBC,MAAAA;AAAtB,KAAD;AAAA,WACpBC,OAAO,CAACC,GAAR,CACG,6BAA4BJ,OAAQ,eAAcC,SAAU,WAAUC,IAAK,EAD9E,CADoB;AAAA,GAAtB;AAMF,MAAIJ,YAAJ,EAAkBK,OAAO,CAACC,GAAR,CAAa,oBAAmBN,YAAa,EAA7C;AACnB,CATwB,CAAzB,C,CAWA;AACA;;AACA,MAAMO,MAAM,GAAG,IAAIhB,YAAJ,CAAiB;AAC9B;AACA;AACAiB,EAAAA,IAAI,EAAEd,IAAI,CAAC,CAACI,SAAD,EAAYF,QAAZ,CAAD,CAHoB;AAI9Ba,EAAAA,KAAK,EAAE,IAAIjB,aAAJ;AAJuB,CAAjB,CAAf","sourcesContent":["import { ApolloClient, InMemoryCache, HttpLink, from } from \"@apollo/client\";\nimport { onError } from \"@apollo/client/link/error\";\n\nconst httpLink = new HttpLink({\n  uri: \"http://localhost:8080/\"\n});\n\nconst errorLink = onError(({ graphQLErrors, networkError }) => {\n  if (graphQLErrors)\n    graphQLErrors.forEach(({ message, locations, path }) =>\n      console.log(\n        `[GraphQL error]: Message: ${message}, Location: ${locations}, Path: ${path}`,\n      ),\n    );\n\n  if (networkError) console.log(`[Network error]: ${networkError}`);\n});\n\n// If you provide a link chain to ApolloClient, you\n// don't provide the `uri` option.\nconst client = new ApolloClient({\n  // The `from` function combines an array of individual links\n  // into a link chain\n  link: from([errorLink, httpLink]),\n  cache: new InMemoryCache()\n});"]},"metadata":{},"sourceType":"module"}