{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar apollo_utilities_1 = require(\"apollo-utilities\");\n\nfunction graphql(resolver, document, rootValue, contextValue, variableValues, execOptions) {\n  if (variableValues === void 0) {\n    variableValues = {};\n  }\n\n  if (execOptions === void 0) {\n    execOptions = {};\n  }\n\n  var mainDefinition = apollo_utilities_1.getMainDefinition(document);\n  var fragments = apollo_utilities_1.getFragmentDefinitions(document);\n  var fragmentMap = apollo_utilities_1.createFragmentMap(fragments);\n  var resultMapper = execOptions.resultMapper;\n\n  var fragmentMatcher = execOptions.fragmentMatcher || function () {\n    return true;\n  };\n\n  var execContext = {\n    fragmentMap: fragmentMap,\n    contextValue: contextValue,\n    variableValues: variableValues,\n    resultMapper: resultMapper,\n    resolver: resolver,\n    fragmentMatcher: fragmentMatcher\n  };\n  return executeSelectionSet(mainDefinition.selectionSet, rootValue, execContext);\n}\n\nexports.graphql = graphql;\n\nfunction executeSelectionSet(selectionSet, rootValue, execContext) {\n  var fragmentMap = execContext.fragmentMap,\n      contextValue = execContext.contextValue,\n      variables = execContext.variableValues;\n  var result = {};\n  selectionSet.selections.forEach(function (selection) {\n    if (variables && !apollo_utilities_1.shouldInclude(selection, variables)) {\n      return;\n    }\n\n    if (apollo_utilities_1.isField(selection)) {\n      var fieldResult = executeField(selection, rootValue, execContext);\n      var resultFieldKey = apollo_utilities_1.resultKeyNameFromField(selection);\n\n      if (fieldResult !== undefined) {\n        if (result[resultFieldKey] === undefined) {\n          result[resultFieldKey] = fieldResult;\n        } else {\n          merge(result[resultFieldKey], fieldResult);\n        }\n      }\n    } else {\n      var fragment = void 0;\n\n      if (apollo_utilities_1.isInlineFragment(selection)) {\n        fragment = selection;\n      } else {\n        fragment = fragmentMap[selection.name.value];\n\n        if (!fragment) {\n          throw new Error(\"No fragment named \" + selection.name.value);\n        }\n      }\n\n      var typeCondition = fragment.typeCondition.name.value;\n\n      if (execContext.fragmentMatcher(rootValue, typeCondition, contextValue)) {\n        var fragmentResult = executeSelectionSet(fragment.selectionSet, rootValue, execContext);\n        merge(result, fragmentResult);\n      }\n    }\n  });\n\n  if (execContext.resultMapper) {\n    return execContext.resultMapper(result, rootValue);\n  }\n\n  return result;\n}\n\nfunction executeField(field, rootValue, execContext) {\n  var variables = execContext.variableValues,\n      contextValue = execContext.contextValue,\n      resolver = execContext.resolver;\n  var fieldName = field.name.value;\n  var args = apollo_utilities_1.argumentsObjectFromField(field, variables);\n  var info = {\n    isLeaf: !field.selectionSet,\n    resultKey: apollo_utilities_1.resultKeyNameFromField(field),\n    directives: apollo_utilities_1.getDirectiveInfoFromField(field, variables),\n    field: field\n  };\n  var result = resolver(fieldName, rootValue, args, contextValue, info);\n\n  if (!field.selectionSet) {\n    return result;\n  }\n\n  if (result == null) {\n    return result;\n  }\n\n  if (Array.isArray(result)) {\n    return executeSubSelectedArray(field, result, execContext);\n  }\n\n  return executeSelectionSet(field.selectionSet, result, execContext);\n}\n\nfunction executeSubSelectedArray(field, result, execContext) {\n  return result.map(function (item) {\n    if (item === null) {\n      return null;\n    }\n\n    if (Array.isArray(item)) {\n      return executeSubSelectedArray(field, item, execContext);\n    }\n\n    return executeSelectionSet(field.selectionSet, item, execContext);\n  });\n}\n\nvar hasOwn = Object.prototype.hasOwnProperty;\n\nfunction merge(dest, src) {\n  if (src !== null && typeof src === 'object') {\n    Object.keys(src).forEach(function (key) {\n      var srcVal = src[key];\n\n      if (!hasOwn.call(dest, key)) {\n        dest[key] = srcVal;\n      } else {\n        merge(dest[key], srcVal);\n      }\n    });\n  }\n}\n\nexports.merge = merge;","map":{"version":3,"sources":["../src/graphql.ts"],"names":[],"mappings":";;;;;;AAQA,IAAA,kBAAA,GAAA,OAAA,CAAA,kBAAA,CAAA;;AAuEA,SAAgB,OAAhB,CACE,QADF,EAEE,QAFF,EAGE,SAHF,EAIE,YAJF,EAKE,cALF,EAME,WANF,EAM+B;AAD7B,MAAA,cAAA,KAAA,KAAA,CAAA,EAAA;AAAA,IAAA,cAAA,GAAA,EAAA;AAAgC;;AAChC,MAAA,WAAA,KAAA,KAAA,CAAA,EAAA;AAAA,IAAA,WAAA,GAAA,EAAA;AAA6B;;AAE7B,MAAM,cAAc,GAAG,kBAAA,CAAA,iBAAA,CAAkB,QAAlB,CAAvB;AAEA,MAAM,SAAS,GAAG,kBAAA,CAAA,sBAAA,CAAuB,QAAvB,CAAlB;AACA,MAAM,WAAW,GAAG,kBAAA,CAAA,iBAAA,CAAkB,SAAlB,CAApB;AAEA,MAAM,YAAY,GAAG,WAAW,CAAC,YAAjC;;AAGA,MAAM,eAAe,GAAG,WAAW,CAAC,eAAZ,IAAgC,YAAA;AAAM,WAAA,IAAA;AAAI,GAAlE;;AAEA,MAAM,WAAW,GAAgB;AAC/B,IAAA,WAAW,EAAA,WADoB;AAE/B,IAAA,YAAY,EAAA,YAFmB;AAG/B,IAAA,cAAc,EAAA,cAHiB;AAI/B,IAAA,YAAY,EAAA,YAJmB;AAK/B,IAAA,QAAQ,EAAA,QALuB;AAM/B,IAAA,eAAe,EAAA;AANgB,GAAjC;AASA,SAAO,mBAAmB,CACxB,cAAc,CAAC,YADS,EAExB,SAFwB,EAGxB,WAHwB,CAA1B;AAKD;;AAhCD,OAAA,CAAA,OAAA,GAAA,OAAA;;AAkCA,SAAS,mBAAT,CACE,YADF,EAEE,SAFF,EAGE,WAHF,EAG0B;AAEhB,MAAA,WAAA,GAAA,WAAA,CAAA,WAAA;AAAA,MAAa,YAAA,GAAA,WAAA,CAAA,YAAb;AAAA,MAA2B,SAAA,GAAA,WAAA,CAAA,cAA3B;AAER,MAAM,MAAM,GAAG,EAAf;AAEA,EAAA,YAAY,CAAC,UAAb,CAAwB,OAAxB,CAAgC,UAAA,SAAA,EAAS;AACvC,QAAI,SAAS,IAAI,CAAC,kBAAA,CAAA,aAAA,CAAc,SAAd,EAAyB,SAAzB,CAAlB,EAAuD;AAErD;AACD;;AAED,QAAI,kBAAA,CAAA,OAAA,CAAQ,SAAR,CAAJ,EAAwB;AACtB,UAAM,WAAW,GAAG,YAAY,CAAC,SAAD,EAAY,SAAZ,EAAuB,WAAvB,CAAhC;AAEA,UAAM,cAAc,GAAG,kBAAA,CAAA,sBAAA,CAAuB,SAAvB,CAAvB;;AAEA,UAAI,WAAW,KAAK,SAApB,EAA+B;AAC7B,YAAI,MAAM,CAAC,cAAD,CAAN,KAA2B,SAA/B,EAA0C;AACxC,UAAA,MAAM,CAAC,cAAD,CAAN,GAAyB,WAAzB;AACD,SAFD,MAEO;AACL,UAAA,KAAK,CAAC,MAAM,CAAC,cAAD,CAAP,EAAyB,WAAzB,CAAL;AACD;AACF;AACF,KAZD,MAYO;AACL,UAAI,QAAQ,GAAA,KAAA,CAAZ;;AAEA,UAAI,kBAAA,CAAA,gBAAA,CAAiB,SAAjB,CAAJ,EAAiC;AAC/B,QAAA,QAAQ,GAAG,SAAX;AACD,OAFD,MAEO;AAEL,QAAA,QAAQ,GAAG,WAAW,CAAC,SAAS,CAAC,IAAV,CAAe,KAAhB,CAAtB;;AAEA,YAAI,CAAC,QAAL,EAAe;AACb,gBAAM,IAAI,KAAJ,CAAU,uBAAqB,SAAS,CAAC,IAAV,CAAe,KAA9C,CAAN;AACD;AACF;;AAED,UAAM,aAAa,GAAG,QAAQ,CAAC,aAAT,CAAuB,IAAvB,CAA4B,KAAlD;;AAEA,UAAI,WAAW,CAAC,eAAZ,CAA4B,SAA5B,EAAuC,aAAvC,EAAsD,YAAtD,CAAJ,EAAyE;AACvE,YAAM,cAAc,GAAG,mBAAmB,CACxC,QAAQ,CAAC,YAD+B,EAExC,SAFwC,EAGxC,WAHwC,CAA1C;AAMA,QAAA,KAAK,CAAC,MAAD,EAAS,cAAT,CAAL;AACD;AACF;AACF,GA5CD;;AA8CA,MAAI,WAAW,CAAC,YAAhB,EAA8B;AAC5B,WAAO,WAAW,CAAC,YAAZ,CAAyB,MAAzB,EAAiC,SAAjC,CAAP;AACD;;AAED,SAAO,MAAP;AACD;;AAED,SAAS,YAAT,CACE,KADF,EAEE,SAFF,EAGE,WAHF,EAG0B;AAEhB,MAAA,SAAA,GAAA,WAAA,CAAA,cAAA;AAAA,MAA2B,YAAA,GAAA,WAAA,CAAA,YAA3B;AAAA,MAAyC,QAAA,GAAA,WAAA,CAAA,QAAzC;AAER,MAAM,SAAS,GAAG,KAAK,CAAC,IAAN,CAAW,KAA7B;AACA,MAAM,IAAI,GAAG,kBAAA,CAAA,wBAAA,CAAyB,KAAzB,EAAgC,SAAhC,CAAb;AAEA,MAAM,IAAI,GAAa;AACrB,IAAA,MAAM,EAAE,CAAC,KAAK,CAAC,YADM;AAErB,IAAA,SAAS,EAAE,kBAAA,CAAA,sBAAA,CAAuB,KAAvB,CAFU;AAGrB,IAAA,UAAU,EAAE,kBAAA,CAAA,yBAAA,CAA0B,KAA1B,EAAiC,SAAjC,CAHS;AAIrB,IAAA,KAAK,EAAA;AAJgB,GAAvB;AAOA,MAAM,MAAM,GAAG,QAAQ,CAAC,SAAD,EAAY,SAAZ,EAAuB,IAAvB,EAA6B,YAA7B,EAA2C,IAA3C,CAAvB;;AAGA,MAAI,CAAC,KAAK,CAAC,YAAX,EAAyB;AACvB,WAAO,MAAP;AACD;;AAID,MAAI,MAAM,IAAI,IAAd,EAAoB;AAElB,WAAO,MAAP;AACD;;AAED,MAAI,KAAK,CAAC,OAAN,CAAc,MAAd,CAAJ,EAA2B;AACzB,WAAO,uBAAuB,CAAC,KAAD,EAAQ,MAAR,EAAgB,WAAhB,CAA9B;AACD;;AAGD,SAAO,mBAAmB,CAAC,KAAK,CAAC,YAAP,EAAqB,MAArB,EAA6B,WAA7B,CAA1B;AACD;;AAED,SAAS,uBAAT,CAAiC,KAAjC,EAAwC,MAAxC,EAAgD,WAAhD,EAA2D;AACzD,SAAO,MAAM,CAAC,GAAP,CAAW,UAAA,IAAA,EAAI;AAEpB,QAAI,IAAI,KAAK,IAAb,EAAmB;AACjB,aAAO,IAAP;AACD;;AAGD,QAAI,KAAK,CAAC,OAAN,CAAc,IAAd,CAAJ,EAAyB;AACvB,aAAO,uBAAuB,CAAC,KAAD,EAAQ,IAAR,EAAc,WAAd,CAA9B;AACD;;AAGD,WAAO,mBAAmB,CAAC,KAAK,CAAC,YAAP,EAAqB,IAArB,EAA2B,WAA3B,CAA1B;AACD,GAbM,CAAP;AAcD;;AAED,IAAM,MAAM,GAAG,MAAM,CAAC,SAAP,CAAiB,cAAhC;;AAEA,SAAgB,KAAhB,CAAsB,IAAtB,EAA4B,GAA5B,EAA+B;AAC7B,MAAI,GAAG,KAAK,IAAR,IAAgB,OAAO,GAAP,KAAe,QAAnC,EAA6C;AAC3C,IAAA,MAAM,CAAC,IAAP,CAAY,GAAZ,EAAiB,OAAjB,CAAyB,UAAA,GAAA,EAAG;AAC1B,UAAM,MAAM,GAAG,GAAG,CAAC,GAAD,CAAlB;;AACA,UAAI,CAAC,MAAM,CAAC,IAAP,CAAY,IAAZ,EAAkB,GAAlB,CAAL,EAA6B;AAC3B,QAAA,IAAI,CAAC,GAAD,CAAJ,GAAY,MAAZ;AACD,OAFD,MAEO;AACL,QAAA,KAAK,CAAC,IAAI,CAAC,GAAD,CAAL,EAAY,MAAZ,CAAL;AACD;AACF,KAPD;AAQD;AACF;;AAXD,OAAA,CAAA,KAAA,GAAA,KAAA","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar apollo_utilities_1 = require(\"apollo-utilities\");\nfunction graphql(resolver, document, rootValue, contextValue, variableValues, execOptions) {\n    if (variableValues === void 0) { variableValues = {}; }\n    if (execOptions === void 0) { execOptions = {}; }\n    var mainDefinition = apollo_utilities_1.getMainDefinition(document);\n    var fragments = apollo_utilities_1.getFragmentDefinitions(document);\n    var fragmentMap = apollo_utilities_1.createFragmentMap(fragments);\n    var resultMapper = execOptions.resultMapper;\n    var fragmentMatcher = execOptions.fragmentMatcher || (function () { return true; });\n    var execContext = {\n        fragmentMap: fragmentMap,\n        contextValue: contextValue,\n        variableValues: variableValues,\n        resultMapper: resultMapper,\n        resolver: resolver,\n        fragmentMatcher: fragmentMatcher,\n    };\n    return executeSelectionSet(mainDefinition.selectionSet, rootValue, execContext);\n}\nexports.graphql = graphql;\nfunction executeSelectionSet(selectionSet, rootValue, execContext) {\n    var fragmentMap = execContext.fragmentMap, contextValue = execContext.contextValue, variables = execContext.variableValues;\n    var result = {};\n    selectionSet.selections.forEach(function (selection) {\n        if (variables && !apollo_utilities_1.shouldInclude(selection, variables)) {\n            return;\n        }\n        if (apollo_utilities_1.isField(selection)) {\n            var fieldResult = executeField(selection, rootValue, execContext);\n            var resultFieldKey = apollo_utilities_1.resultKeyNameFromField(selection);\n            if (fieldResult !== undefined) {\n                if (result[resultFieldKey] === undefined) {\n                    result[resultFieldKey] = fieldResult;\n                }\n                else {\n                    merge(result[resultFieldKey], fieldResult);\n                }\n            }\n        }\n        else {\n            var fragment = void 0;\n            if (apollo_utilities_1.isInlineFragment(selection)) {\n                fragment = selection;\n            }\n            else {\n                fragment = fragmentMap[selection.name.value];\n                if (!fragment) {\n                    throw new Error(\"No fragment named \" + selection.name.value);\n                }\n            }\n            var typeCondition = fragment.typeCondition.name.value;\n            if (execContext.fragmentMatcher(rootValue, typeCondition, contextValue)) {\n                var fragmentResult = executeSelectionSet(fragment.selectionSet, rootValue, execContext);\n                merge(result, fragmentResult);\n            }\n        }\n    });\n    if (execContext.resultMapper) {\n        return execContext.resultMapper(result, rootValue);\n    }\n    return result;\n}\nfunction executeField(field, rootValue, execContext) {\n    var variables = execContext.variableValues, contextValue = execContext.contextValue, resolver = execContext.resolver;\n    var fieldName = field.name.value;\n    var args = apollo_utilities_1.argumentsObjectFromField(field, variables);\n    var info = {\n        isLeaf: !field.selectionSet,\n        resultKey: apollo_utilities_1.resultKeyNameFromField(field),\n        directives: apollo_utilities_1.getDirectiveInfoFromField(field, variables),\n        field: field,\n    };\n    var result = resolver(fieldName, rootValue, args, contextValue, info);\n    if (!field.selectionSet) {\n        return result;\n    }\n    if (result == null) {\n        return result;\n    }\n    if (Array.isArray(result)) {\n        return executeSubSelectedArray(field, result, execContext);\n    }\n    return executeSelectionSet(field.selectionSet, result, execContext);\n}\nfunction executeSubSelectedArray(field, result, execContext) {\n    return result.map(function (item) {\n        if (item === null) {\n            return null;\n        }\n        if (Array.isArray(item)) {\n            return executeSubSelectedArray(field, item, execContext);\n        }\n        return executeSelectionSet(field.selectionSet, item, execContext);\n    });\n}\nvar hasOwn = Object.prototype.hasOwnProperty;\nfunction merge(dest, src) {\n    if (src !== null && typeof src === 'object') {\n        Object.keys(src).forEach(function (key) {\n            var srcVal = src[key];\n            if (!hasOwn.call(dest, key)) {\n                dest[key] = srcVal;\n            }\n            else {\n                merge(dest[key], srcVal);\n            }\n        });\n    }\n}\nexports.merge = merge;\n//# sourceMappingURL=graphql.js.map"]},"metadata":{},"sourceType":"script"}