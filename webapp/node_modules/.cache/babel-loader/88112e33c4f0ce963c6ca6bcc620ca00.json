{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar tslib_1 = require(\"tslib\");\n\nvar apollo_utilities_1 = require(\"apollo-utilities\");\n\nvar graphql_1 = require(\"./graphql\");\n\nfunction graphql(resolver, document, rootValue, contextValue, variableValues, execOptions) {\n  if (execOptions === void 0) {\n    execOptions = {};\n  }\n\n  var mainDefinition = apollo_utilities_1.getMainDefinition(document);\n  var fragments = apollo_utilities_1.getFragmentDefinitions(document);\n  var fragmentMap = apollo_utilities_1.createFragmentMap(fragments);\n  var resultMapper = execOptions.resultMapper;\n\n  var fragmentMatcher = execOptions.fragmentMatcher || function () {\n    return true;\n  };\n\n  var execContext = {\n    fragmentMap: fragmentMap,\n    contextValue: contextValue,\n    variableValues: variableValues,\n    resultMapper: resultMapper,\n    resolver: resolver,\n    fragmentMatcher: fragmentMatcher\n  };\n  return executeSelectionSet(mainDefinition.selectionSet, rootValue, execContext);\n}\n\nexports.graphql = graphql;\n\nfunction executeSelectionSet(selectionSet, rootValue, execContext) {\n  return tslib_1.__awaiter(this, void 0, void 0, function () {\n    var fragmentMap, contextValue, variables, result, execute;\n\n    var _this = this;\n\n    return tslib_1.__generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          fragmentMap = execContext.fragmentMap, contextValue = execContext.contextValue, variables = execContext.variableValues;\n          result = {};\n\n          execute = function (selection) {\n            return tslib_1.__awaiter(_this, void 0, void 0, function () {\n              var fieldResult, resultFieldKey, fragment, typeCondition, fragmentResult;\n              return tslib_1.__generator(this, function (_a) {\n                switch (_a.label) {\n                  case 0:\n                    if (!apollo_utilities_1.shouldInclude(selection, variables)) {\n                      return [2];\n                    }\n\n                    if (!apollo_utilities_1.isField(selection)) return [3, 2];\n                    return [4, executeField(selection, rootValue, execContext)];\n\n                  case 1:\n                    fieldResult = _a.sent();\n                    resultFieldKey = apollo_utilities_1.resultKeyNameFromField(selection);\n\n                    if (fieldResult !== undefined) {\n                      if (result[resultFieldKey] === undefined) {\n                        result[resultFieldKey] = fieldResult;\n                      } else {\n                        graphql_1.merge(result[resultFieldKey], fieldResult);\n                      }\n                    }\n\n                    return [2];\n\n                  case 2:\n                    if (apollo_utilities_1.isInlineFragment(selection)) {\n                      fragment = selection;\n                    } else {\n                      fragment = fragmentMap[selection.name.value];\n\n                      if (!fragment) {\n                        throw new Error(\"No fragment named \" + selection.name.value);\n                      }\n                    }\n\n                    typeCondition = fragment.typeCondition.name.value;\n                    if (!execContext.fragmentMatcher(rootValue, typeCondition, contextValue)) return [3, 4];\n                    return [4, executeSelectionSet(fragment.selectionSet, rootValue, execContext)];\n\n                  case 3:\n                    fragmentResult = _a.sent();\n                    graphql_1.merge(result, fragmentResult);\n                    _a.label = 4;\n\n                  case 4:\n                    return [2];\n                }\n              });\n            });\n          };\n\n          return [4, Promise.all(selectionSet.selections.map(execute))];\n\n        case 1:\n          _a.sent();\n\n          if (execContext.resultMapper) {\n            return [2, execContext.resultMapper(result, rootValue)];\n          }\n\n          return [2, result];\n      }\n    });\n  });\n}\n\nfunction executeField(field, rootValue, execContext) {\n  return tslib_1.__awaiter(this, void 0, void 0, function () {\n    var variables, contextValue, resolver, fieldName, args, info, result;\n    return tslib_1.__generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          variables = execContext.variableValues, contextValue = execContext.contextValue, resolver = execContext.resolver;\n          fieldName = field.name.value;\n          args = apollo_utilities_1.argumentsObjectFromField(field, variables);\n          info = {\n            isLeaf: !field.selectionSet,\n            resultKey: apollo_utilities_1.resultKeyNameFromField(field),\n            directives: apollo_utilities_1.getDirectiveInfoFromField(field, variables),\n            field: field\n          };\n          return [4, resolver(fieldName, rootValue, args, contextValue, info)];\n\n        case 1:\n          result = _a.sent();\n\n          if (!field.selectionSet) {\n            return [2, result];\n          }\n\n          if (result == null) {\n            return [2, result];\n          }\n\n          if (Array.isArray(result)) {\n            return [2, executeSubSelectedArray(field, result, execContext)];\n          }\n\n          return [2, executeSelectionSet(field.selectionSet, result, execContext)];\n      }\n    });\n  });\n}\n\nfunction executeSubSelectedArray(field, result, execContext) {\n  return Promise.all(result.map(function (item) {\n    if (item === null) {\n      return null;\n    }\n\n    if (Array.isArray(item)) {\n      return executeSubSelectedArray(field, item, execContext);\n    }\n\n    return executeSelectionSet(field.selectionSet, item, execContext);\n  }));\n}","map":{"version":3,"sources":["../src/async.ts"],"names":[],"mappings":";;;;;;;;AAQA,IAAA,kBAAA,GAAA,OAAA,CAAA,kBAAA,CAAA;;AAYA,IAAA,SAAA,GAAA,OAAA,CAAA,WAAA,CAAA;;AAyBA,SAAgB,OAAhB,CACE,QADF,EAEE,QAFF,EAGE,SAHF,EAIE,YAJF,EAKE,cALF,EAME,WANF,EAM+B;AAA7B,MAAA,WAAA,KAAA,KAAA,CAAA,EAAA;AAAA,IAAA,WAAA,GAAA,EAAA;AAA6B;;AAE7B,MAAM,cAAc,GAAG,kBAAA,CAAA,iBAAA,CAAkB,QAAlB,CAAvB;AAEA,MAAM,SAAS,GAAG,kBAAA,CAAA,sBAAA,CAAuB,QAAvB,CAAlB;AACA,MAAM,WAAW,GAAG,kBAAA,CAAA,iBAAA,CAAkB,SAAlB,CAApB;AAEA,MAAM,YAAY,GAAG,WAAW,CAAC,YAAjC;;AAGA,MAAM,eAAe,GAAG,WAAW,CAAC,eAAZ,IAAgC,YAAA;AAAM,WAAA,IAAA;AAAI,GAAlE;;AAEA,MAAM,WAAW,GAAgB;AAC/B,IAAA,WAAW,EAAA,WADoB;AAE/B,IAAA,YAAY,EAAA,YAFmB;AAG/B,IAAA,cAAc,EAAA,cAHiB;AAI/B,IAAA,YAAY,EAAA,YAJmB;AAK/B,IAAA,QAAQ,EAAA,QALuB;AAM/B,IAAA,eAAe,EAAA;AANgB,GAAjC;AASA,SAAO,mBAAmB,CACxB,cAAc,CAAC,YADS,EAExB,SAFwB,EAGxB,WAHwB,CAA1B;AAKD;;AAhCD,OAAA,CAAA,OAAA,GAAA,OAAA;;AAkCA,SAAe,mBAAf,CACE,YADF,EAEE,SAFF,EAGE,WAHF,EAG0B;;;;;;;;;AAEhB,UAAA,WAAW,GAA8C,WAAW,CAAzD,WAAX,EAAa,YAAY,GAAgC,WAAW,CAA3C,YAAzB,EAA2C,SAAS,GAAK,WAAW,CAAhB,cAApD;AAEF,UAAA,MAAM,GAAG,EAAT;;AAEA,UAAA,OAAO,GAAG,UAAM,SAAN,EAAe;AAAA,mBAAA,OAAA,CAAA,SAAA,CAAA,KAAA,EAAA,KAAA,CAAA,EAAA,KAAA,CAAA,EAAA,YAAA;;;;;AAC7B,wBAAI,CAAC,kBAAA,CAAA,aAAA,CAAc,SAAd,EAAyB,SAAzB,CAAL,EAA0C;AAExC,6BAAA,CAAA,CAAA,CAAA;AACD;;yBAEG,kBAAA,CAAA,OAAA,CAAQ,SAAR,C,EAAA,OAAA,CAAA,CAAA,EAAA,CAAA,CAAA;AACkB,2BAAA,CAAA,CAAA,EAAM,YAAY,CAAC,SAAD,EAAY,SAAZ,EAAuB,WAAvB,CAAlB,CAAA;;;AAAd,oBAAA,WAAW,GAAG,EAAA,CAAA,IAAA,EAAd;AAEA,oBAAA,cAAc,GAAG,kBAAA,CAAA,sBAAA,CAAuB,SAAvB,CAAjB;;AAEN,wBAAI,WAAW,KAAK,SAApB,EAA+B;AAC7B,0BAAI,MAAM,CAAC,cAAD,CAAN,KAA2B,SAA/B,EAA0C;AACxC,wBAAA,MAAM,CAAC,cAAD,CAAN,GAAyB,WAAzB;AACD,uBAFD,MAEO;AACL,wBAAA,SAAA,CAAA,KAAA,CAAM,MAAM,CAAC,cAAD,CAAZ,EAA8B,WAA9B;AACD;AACF;;AAED,2BAAA,CAAA,CAAA,CAAA;;;AAKF,wBAAI,kBAAA,CAAA,gBAAA,CAAiB,SAAjB,CAAJ,EAAiC;AAC/B,sBAAA,QAAQ,GAAG,SAAX;AACD,qBAFD,MAEO;AAEL,sBAAA,QAAQ,GAAG,WAAW,CAAC,SAAS,CAAC,IAAV,CAAe,KAAhB,CAAtB;;AAEA,0BAAI,CAAC,QAAL,EAAe;AACb,8BAAM,IAAI,KAAJ,CAAU,uBAAqB,SAAS,CAAC,IAAV,CAAe,KAA9C,CAAN;AACD;AACF;;AAEK,oBAAA,aAAa,GAAG,QAAQ,CAAC,aAAT,CAAuB,IAAvB,CAA4B,KAA5C;yBAEF,WAAW,CAAC,eAAZ,CAA4B,SAA5B,EAAuC,aAAvC,EAAsD,YAAtD,C,EAAA,OAAA,CAAA,CAAA,EAAA,CAAA,CAAA;AACqB,2BAAA,CAAA,CAAA,EAAM,mBAAmB,CAC9C,QAAQ,CAAC,YADqC,EAE9C,SAF8C,EAG9C,WAH8C,CAAzB,CAAA;;;AAAjB,oBAAA,cAAc,GAAG,EAAA,CAAA,IAAA,EAAjB;AAMN,oBAAA,SAAA,CAAA,KAAA,CAAM,MAAN,EAAc,cAAd;;;;;;;aA5C2B,CAAA;AA8C9B,WA9CK;;AAgDN,iBAAA,CAAA,CAAA,EAAM,OAAO,CAAC,GAAR,CAAY,YAAY,CAAC,UAAb,CAAwB,GAAxB,CAA4B,OAA5B,CAAZ,CAAN,CAAA;;;AAAA,UAAA,EAAA,CAAA,IAAA;;AAEA,cAAI,WAAW,CAAC,YAAhB,EAA8B;AAC5B,mBAAA,CAAA,CAAA,EAAO,WAAW,CAAC,YAAZ,CAAyB,MAAzB,EAAiC,SAAjC,CAAP,CAAA;AACD;;AAED,iBAAA,CAAA,CAAA,EAAO,MAAP,CAAA;;;;AACD;;AAED,SAAe,YAAf,CACE,KADF,EAEE,SAFF,EAGE,WAHF,EAG0B;;;;;;AAEA,UAAA,SAAS,GAA6B,WAAW,CAAxC,cAAT,EAAW,YAAY,GAAe,WAAW,CAA1B,YAAvB,EAAyB,QAAQ,GAAK,WAAW,CAAhB,QAAjC;AAElB,UAAA,SAAS,GAAG,KAAK,CAAC,IAAN,CAAW,KAAvB;AACA,UAAA,IAAI,GAAG,kBAAA,CAAA,wBAAA,CAAyB,KAAzB,EAAgC,SAAhC,CAAP;AAEA,UAAA,IAAI,GAAa;AACrB,YAAA,MAAM,EAAE,CAAC,KAAK,CAAC,YADM;AAErB,YAAA,SAAS,EAAE,kBAAA,CAAA,sBAAA,CAAuB,KAAvB,CAFU;AAGrB,YAAA,UAAU,EAAE,kBAAA,CAAA,yBAAA,CAA0B,KAA1B,EAAiC,SAAjC,CAHS;AAIrB,YAAA,KAAK,EAAA;AAJgB,WAAjB;AAOS,iBAAA,CAAA,CAAA,EAAM,QAAQ,CAAC,SAAD,EAAY,SAAZ,EAAuB,IAAvB,EAA6B,YAA7B,EAA2C,IAA3C,CAAd,CAAA;;;AAAT,UAAA,MAAM,GAAG,EAAA,CAAA,IAAA,EAAT;;AAGN,cAAI,CAAC,KAAK,CAAC,YAAX,EAAyB;AACvB,mBAAA,CAAA,CAAA,EAAO,MAAP,CAAA;AACD;;AAID,cAAI,MAAM,IAAI,IAAd,EAAoB;AAElB,mBAAA,CAAA,CAAA,EAAO,MAAP,CAAA;AACD;;AAED,cAAI,KAAK,CAAC,OAAN,CAAc,MAAd,CAAJ,EAA2B;AACzB,mBAAA,CAAA,CAAA,EAAO,uBAAuB,CAAC,KAAD,EAAQ,MAAR,EAAgB,WAAhB,CAA9B,CAAA;AACD;;AAGD,iBAAA,CAAA,CAAA,EAAO,mBAAmB,CAAC,KAAK,CAAC,YAAP,EAAqB,MAArB,EAA6B,WAA7B,CAA1B,CAAA;;;;AACD;;AAED,SAAS,uBAAT,CAAiC,KAAjC,EAAwC,MAAxC,EAAgD,WAAhD,EAA2D;AACzD,SAAO,OAAO,CAAC,GAAR,CACL,MAAM,CAAC,GAAP,CAAW,UAAA,IAAA,EAAI;AAEb,QAAI,IAAI,KAAK,IAAb,EAAmB;AACjB,aAAO,IAAP;AACD;;AAGD,QAAI,KAAK,CAAC,OAAN,CAAc,IAAd,CAAJ,EAAyB;AACvB,aAAO,uBAAuB,CAAC,KAAD,EAAQ,IAAR,EAAc,WAAd,CAA9B;AACD;;AAGD,WAAO,mBAAmB,CAAC,KAAK,CAAC,YAAP,EAAqB,IAArB,EAA2B,WAA3B,CAA1B;AACD,GAbD,CADK,CAAP;AAgBD","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\nvar apollo_utilities_1 = require(\"apollo-utilities\");\nvar graphql_1 = require(\"./graphql\");\nfunction graphql(resolver, document, rootValue, contextValue, variableValues, execOptions) {\n    if (execOptions === void 0) { execOptions = {}; }\n    var mainDefinition = apollo_utilities_1.getMainDefinition(document);\n    var fragments = apollo_utilities_1.getFragmentDefinitions(document);\n    var fragmentMap = apollo_utilities_1.createFragmentMap(fragments);\n    var resultMapper = execOptions.resultMapper;\n    var fragmentMatcher = execOptions.fragmentMatcher || (function () { return true; });\n    var execContext = {\n        fragmentMap: fragmentMap,\n        contextValue: contextValue,\n        variableValues: variableValues,\n        resultMapper: resultMapper,\n        resolver: resolver,\n        fragmentMatcher: fragmentMatcher,\n    };\n    return executeSelectionSet(mainDefinition.selectionSet, rootValue, execContext);\n}\nexports.graphql = graphql;\nfunction executeSelectionSet(selectionSet, rootValue, execContext) {\n    return tslib_1.__awaiter(this, void 0, void 0, function () {\n        var fragmentMap, contextValue, variables, result, execute;\n        var _this = this;\n        return tslib_1.__generator(this, function (_a) {\n            switch (_a.label) {\n                case 0:\n                    fragmentMap = execContext.fragmentMap, contextValue = execContext.contextValue, variables = execContext.variableValues;\n                    result = {};\n                    execute = function (selection) { return tslib_1.__awaiter(_this, void 0, void 0, function () {\n                        var fieldResult, resultFieldKey, fragment, typeCondition, fragmentResult;\n                        return tslib_1.__generator(this, function (_a) {\n                            switch (_a.label) {\n                                case 0:\n                                    if (!apollo_utilities_1.shouldInclude(selection, variables)) {\n                                        return [2];\n                                    }\n                                    if (!apollo_utilities_1.isField(selection)) return [3, 2];\n                                    return [4, executeField(selection, rootValue, execContext)];\n                                case 1:\n                                    fieldResult = _a.sent();\n                                    resultFieldKey = apollo_utilities_1.resultKeyNameFromField(selection);\n                                    if (fieldResult !== undefined) {\n                                        if (result[resultFieldKey] === undefined) {\n                                            result[resultFieldKey] = fieldResult;\n                                        }\n                                        else {\n                                            graphql_1.merge(result[resultFieldKey], fieldResult);\n                                        }\n                                    }\n                                    return [2];\n                                case 2:\n                                    if (apollo_utilities_1.isInlineFragment(selection)) {\n                                        fragment = selection;\n                                    }\n                                    else {\n                                        fragment = fragmentMap[selection.name.value];\n                                        if (!fragment) {\n                                            throw new Error(\"No fragment named \" + selection.name.value);\n                                        }\n                                    }\n                                    typeCondition = fragment.typeCondition.name.value;\n                                    if (!execContext.fragmentMatcher(rootValue, typeCondition, contextValue)) return [3, 4];\n                                    return [4, executeSelectionSet(fragment.selectionSet, rootValue, execContext)];\n                                case 3:\n                                    fragmentResult = _a.sent();\n                                    graphql_1.merge(result, fragmentResult);\n                                    _a.label = 4;\n                                case 4: return [2];\n                            }\n                        });\n                    }); };\n                    return [4, Promise.all(selectionSet.selections.map(execute))];\n                case 1:\n                    _a.sent();\n                    if (execContext.resultMapper) {\n                        return [2, execContext.resultMapper(result, rootValue)];\n                    }\n                    return [2, result];\n            }\n        });\n    });\n}\nfunction executeField(field, rootValue, execContext) {\n    return tslib_1.__awaiter(this, void 0, void 0, function () {\n        var variables, contextValue, resolver, fieldName, args, info, result;\n        return tslib_1.__generator(this, function (_a) {\n            switch (_a.label) {\n                case 0:\n                    variables = execContext.variableValues, contextValue = execContext.contextValue, resolver = execContext.resolver;\n                    fieldName = field.name.value;\n                    args = apollo_utilities_1.argumentsObjectFromField(field, variables);\n                    info = {\n                        isLeaf: !field.selectionSet,\n                        resultKey: apollo_utilities_1.resultKeyNameFromField(field),\n                        directives: apollo_utilities_1.getDirectiveInfoFromField(field, variables),\n                        field: field,\n                    };\n                    return [4, resolver(fieldName, rootValue, args, contextValue, info)];\n                case 1:\n                    result = _a.sent();\n                    if (!field.selectionSet) {\n                        return [2, result];\n                    }\n                    if (result == null) {\n                        return [2, result];\n                    }\n                    if (Array.isArray(result)) {\n                        return [2, executeSubSelectedArray(field, result, execContext)];\n                    }\n                    return [2, executeSelectionSet(field.selectionSet, result, execContext)];\n            }\n        });\n    });\n}\nfunction executeSubSelectedArray(field, result, execContext) {\n    return Promise.all(result.map(function (item) {\n        if (item === null) {\n            return null;\n        }\n        if (Array.isArray(item)) {\n            return executeSubSelectedArray(field, item, execContext);\n        }\n        return executeSelectionSet(field.selectionSet, item, execContext);\n    }));\n}\n//# sourceMappingURL=async.js.map"]},"metadata":{},"sourceType":"script"}