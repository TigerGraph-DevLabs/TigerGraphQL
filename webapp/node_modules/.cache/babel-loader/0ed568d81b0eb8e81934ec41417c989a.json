{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nvar __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nexport * from 'apollo-client';\nexport * from 'apollo-link';\nexport * from 'apollo-cache-inmemory';\nimport { ApolloLink, Observable } from 'apollo-link';\nimport { HttpLink } from 'apollo-link-http';\nimport { withClientState } from 'apollo-link-state';\nimport { onError } from 'apollo-link-error';\nimport { InMemoryCache } from 'apollo-cache-inmemory';\nimport gql from 'graphql-tag';\nimport ApolloClient from 'apollo-client';\nexport { gql, InMemoryCache, HttpLink };\nvar PRESET_CONFIG_KEYS = ['request', 'uri', 'credentials', 'headers', 'fetch', 'fetchOptions', 'clientState', 'onError', 'cacheRedirects', 'cache'];\n\nvar DefaultClient = function (_super) {\n  __extends(DefaultClient, _super);\n\n  function DefaultClient(config) {\n    if (config === void 0) {\n      config = {};\n    }\n\n    var _this = this;\n\n    if (config) {\n      var diff = Object.keys(config).filter(function (key) {\n        return PRESET_CONFIG_KEYS.indexOf(key) === -1;\n      });\n\n      if (diff.length > 0) {\n        console.warn('ApolloBoost was initialized with unsupported options: ' + (\"\" + diff.join(' ')));\n      }\n    }\n\n    var request = config.request,\n        uri = config.uri,\n        credentials = config.credentials,\n        headers = config.headers,\n        fetch = config.fetch,\n        fetchOptions = config.fetchOptions,\n        clientState = config.clientState,\n        cacheRedirects = config.cacheRedirects,\n        errorCallback = config.onError;\n    var cache = config.cache;\n\n    if (cache && cacheRedirects) {\n      throw new Error('Incompatible cache configuration. If providing `cache` then ' + 'configure the provided instance with `cacheRedirects` instead.');\n    }\n\n    if (!cache) {\n      cache = cacheRedirects ? new InMemoryCache({\n        cacheRedirects: cacheRedirects\n      }) : new InMemoryCache();\n    }\n\n    var stateLink = clientState ? withClientState(__assign({}, clientState, {\n      cache: cache\n    })) : false;\n    var errorLink = errorCallback ? onError(errorCallback) : onError(function (_a) {\n      var graphQLErrors = _a.graphQLErrors,\n          networkError = _a.networkError;\n\n      if (graphQLErrors) {\n        graphQLErrors.map(function (_a) {\n          var message = _a.message,\n              locations = _a.locations,\n              path = _a.path;\n          return console.log(\"[GraphQL error]: Message: \" + message + \", Location: \" + (locations + \", Path: \" + path));\n        });\n      }\n\n      if (networkError) {\n        console.log(\"[Network error]: \" + networkError);\n      }\n    });\n    var requestHandler = request ? new ApolloLink(function (operation, forward) {\n      return new Observable(function (observer) {\n        var handle;\n        Promise.resolve(operation).then(function (oper) {\n          return request(oper);\n        }).then(function () {\n          handle = forward(operation).subscribe({\n            next: observer.next.bind(observer),\n            error: observer.error.bind(observer),\n            complete: observer.complete.bind(observer)\n          });\n        }).catch(observer.error.bind(observer));\n        return function () {\n          if (handle) {\n            handle.unsubscribe();\n          }\n        };\n      });\n    }) : false;\n    var httpLink = new HttpLink({\n      uri: uri || '/graphql',\n      fetch: fetch,\n      fetchOptions: fetchOptions || {},\n      credentials: credentials || 'same-origin',\n      headers: headers || {}\n    });\n    var link = ApolloLink.from([errorLink, requestHandler, stateLink, httpLink].filter(function (x) {\n      return !!x;\n    }));\n    _this = _super.call(this, {\n      cache: cache,\n      link: link\n    }) || this;\n    return _this;\n  }\n\n  return DefaultClient;\n}(ApolloClient);\n\nexport default DefaultClient;","map":{"version":3,"sources":["../src/index.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["var __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    }\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nvar __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nexport * from 'apollo-client';\nexport * from 'apollo-link';\nexport * from 'apollo-cache-inmemory';\nimport { ApolloLink, Observable } from 'apollo-link';\nimport { HttpLink } from 'apollo-link-http';\nimport { withClientState } from 'apollo-link-state';\nimport { onError } from 'apollo-link-error';\nimport { InMemoryCache } from 'apollo-cache-inmemory';\nimport gql from 'graphql-tag';\nimport ApolloClient from 'apollo-client';\nexport { gql, InMemoryCache, HttpLink };\nvar PRESET_CONFIG_KEYS = [\n    'request',\n    'uri',\n    'credentials',\n    'headers',\n    'fetch',\n    'fetchOptions',\n    'clientState',\n    'onError',\n    'cacheRedirects',\n    'cache',\n];\nvar DefaultClient = (function (_super) {\n    __extends(DefaultClient, _super);\n    function DefaultClient(config) {\n        if (config === void 0) { config = {}; }\n        var _this = this;\n        if (config) {\n            var diff = Object.keys(config).filter(function (key) { return PRESET_CONFIG_KEYS.indexOf(key) === -1; });\n            if (diff.length > 0) {\n                console.warn('ApolloBoost was initialized with unsupported options: ' +\n                    (\"\" + diff.join(' ')));\n            }\n        }\n        var request = config.request, uri = config.uri, credentials = config.credentials, headers = config.headers, fetch = config.fetch, fetchOptions = config.fetchOptions, clientState = config.clientState, cacheRedirects = config.cacheRedirects, errorCallback = config.onError;\n        var cache = config.cache;\n        if (cache && cacheRedirects) {\n            throw new Error('Incompatible cache configuration. If providing `cache` then ' +\n                'configure the provided instance with `cacheRedirects` instead.');\n        }\n        if (!cache) {\n            cache = cacheRedirects\n                ? new InMemoryCache({ cacheRedirects: cacheRedirects })\n                : new InMemoryCache();\n        }\n        var stateLink = clientState\n            ? withClientState(__assign({}, clientState, { cache: cache }))\n            : false;\n        var errorLink = errorCallback\n            ? onError(errorCallback)\n            : onError(function (_a) {\n                var graphQLErrors = _a.graphQLErrors, networkError = _a.networkError;\n                if (graphQLErrors) {\n                    graphQLErrors.map(function (_a) {\n                        var message = _a.message, locations = _a.locations, path = _a.path;\n                        return console.log(\"[GraphQL error]: Message: \" + message + \", Location: \" +\n                            (locations + \", Path: \" + path));\n                    });\n                }\n                if (networkError) {\n                    console.log(\"[Network error]: \" + networkError);\n                }\n            });\n        var requestHandler = request\n            ? new ApolloLink(function (operation, forward) {\n                return new Observable(function (observer) {\n                    var handle;\n                    Promise.resolve(operation)\n                        .then(function (oper) { return request(oper); })\n                        .then(function () {\n                        handle = forward(operation).subscribe({\n                            next: observer.next.bind(observer),\n                            error: observer.error.bind(observer),\n                            complete: observer.complete.bind(observer),\n                        });\n                    })\n                        .catch(observer.error.bind(observer));\n                    return function () {\n                        if (handle) {\n                            handle.unsubscribe();\n                        }\n                    };\n                });\n            })\n            : false;\n        var httpLink = new HttpLink({\n            uri: uri || '/graphql',\n            fetch: fetch,\n            fetchOptions: fetchOptions || {},\n            credentials: credentials || 'same-origin',\n            headers: headers || {},\n        });\n        var link = ApolloLink.from([\n            errorLink,\n            requestHandler,\n            stateLink,\n            httpLink,\n        ].filter(function (x) { return !!x; }));\n        _this = _super.call(this, { cache: cache, link: link }) || this;\n        return _this;\n    }\n    return DefaultClient;\n}(ApolloClient));\nexport default DefaultClient;\n//# sourceMappingURL=index.js.map"]},"metadata":{},"sourceType":"module"}