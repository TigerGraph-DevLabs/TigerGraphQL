{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var extendStatics = Object.setPrototypeOf || {\n    __proto__: []\n  } instanceof Array && function (d, b) {\n    d.__proto__ = b;\n  } || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nimport { ApolloLink, Observable } from 'apollo-link';\nimport { hasDirectives, getMainDefinition } from 'apollo-utilities';\nimport * as Async from 'graphql-anywhere/lib/async';\nvar graphql = Async.graphql;\nimport { removeClientSetsFromDocument, normalizeTypeDefs } from './utils';\n\nvar capitalizeFirstLetter = function (str) {\n  return str.charAt(0).toUpperCase() + str.slice(1);\n};\n\nexport var withClientState = function (clientStateConfig) {\n  if (clientStateConfig === void 0) {\n    clientStateConfig = {\n      resolvers: {},\n      defaults: {}\n    };\n  }\n\n  var defaults = clientStateConfig.defaults,\n      cache = clientStateConfig.cache,\n      typeDefs = clientStateConfig.typeDefs,\n      fragmentMatcher = clientStateConfig.fragmentMatcher;\n\n  if (cache && defaults) {\n    cache.writeData({\n      data: defaults\n    });\n  }\n\n  return new (function (_super) {\n    __extends(StateLink, _super);\n\n    function StateLink() {\n      return _super !== null && _super.apply(this, arguments) || this;\n    }\n\n    StateLink.prototype.writeDefaults = function () {\n      if (cache && defaults) {\n        cache.writeData({\n          data: defaults\n        });\n      }\n    };\n\n    StateLink.prototype.request = function (operation, forward) {\n      if (forward === void 0) {\n        forward = function () {\n          return Observable.of({\n            data: {}\n          });\n        };\n      }\n\n      if (typeDefs) {\n        var directives_1 = 'directive @client on FIELD';\n        var definition_1 = normalizeTypeDefs(typeDefs);\n        operation.setContext(function (_a) {\n          var _b = _a.schemas,\n              schemas = _b === void 0 ? [] : _b;\n          return {\n            schemas: schemas.concat([{\n              definition: definition_1,\n              directives: directives_1\n            }])\n          };\n        });\n      }\n\n      var isClient = hasDirectives(['client'], operation.query);\n      if (!isClient) return forward(operation);\n      var resolvers = typeof clientStateConfig.resolvers === 'function' ? clientStateConfig.resolvers() : clientStateConfig.resolvers;\n      var server = removeClientSetsFromDocument(operation.query);\n      var query = operation.query;\n      var type = capitalizeFirstLetter((getMainDefinition(query) || {}).operation) || 'Query';\n\n      var resolver = function (fieldName, rootValue, args, context, info) {\n        if (rootValue === void 0) {\n          rootValue = {};\n        }\n\n        var resultKey = info.resultKey;\n        var aliasedNode = rootValue[resultKey];\n        var preAliasingNode = rootValue[fieldName];\n        var aliasNeeded = resultKey !== fieldName;\n\n        if (aliasedNode !== undefined || preAliasingNode !== undefined) {\n          return aliasedNode || preAliasingNode;\n        }\n\n        var resolverMap = resolvers[rootValue.__typename || type];\n\n        if (resolverMap) {\n          var resolve = resolverMap[fieldName];\n          if (resolve) return resolve(rootValue, args, context, info);\n        }\n\n        return (aliasNeeded ? aliasedNode : preAliasingNode) || (defaults || {})[fieldName];\n      };\n\n      if (server) operation.query = server;\n      var obs = server && forward ? forward(operation) : Observable.of({\n        data: {}\n      });\n      return new Observable(function (observer) {\n        var complete = false;\n        var handlingNext = false;\n        obs.subscribe({\n          next: function (_a) {\n            var data = _a.data,\n                errors = _a.errors;\n            var observerErrorHandler = observer.error.bind(observer);\n            var context = operation.getContext();\n            handlingNext = true;\n            graphql(resolver, query, data, context, operation.variables, {\n              fragmentMatcher: fragmentMatcher\n            }).then(function (nextData) {\n              observer.next({\n                data: nextData,\n                errors: errors\n              });\n\n              if (complete) {\n                observer.complete();\n              }\n\n              handlingNext = false;\n            }).catch(observerErrorHandler);\n          },\n          error: observer.error.bind(observer),\n          complete: function () {\n            if (!handlingNext) {\n              observer.complete();\n            }\n\n            complete = true;\n          }\n        });\n      });\n    };\n\n    return StateLink;\n  }(ApolloLink))();\n};","map":{"version":3,"sources":["../src/index.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["var __extends = (this && this.__extends) || (function () {\n    var extendStatics = Object.setPrototypeOf ||\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nimport { ApolloLink, Observable, } from 'apollo-link';\nimport { hasDirectives, getMainDefinition } from 'apollo-utilities';\nimport * as Async from 'graphql-anywhere/lib/async';\nvar graphql = Async.graphql;\nimport { removeClientSetsFromDocument, normalizeTypeDefs } from './utils';\nvar capitalizeFirstLetter = function (str) { return str.charAt(0).toUpperCase() + str.slice(1); };\nexport var withClientState = function (clientStateConfig) {\n    if (clientStateConfig === void 0) { clientStateConfig = { resolvers: {}, defaults: {} }; }\n    var defaults = clientStateConfig.defaults, cache = clientStateConfig.cache, typeDefs = clientStateConfig.typeDefs, fragmentMatcher = clientStateConfig.fragmentMatcher;\n    if (cache && defaults) {\n        cache.writeData({ data: defaults });\n    }\n    return new (function (_super) {\n        __extends(StateLink, _super);\n        function StateLink() {\n            return _super !== null && _super.apply(this, arguments) || this;\n        }\n        StateLink.prototype.writeDefaults = function () {\n            if (cache && defaults) {\n                cache.writeData({ data: defaults });\n            }\n        };\n        StateLink.prototype.request = function (operation, forward) {\n            if (forward === void 0) { forward = function () { return Observable.of({ data: {} }); }; }\n            if (typeDefs) {\n                var directives_1 = 'directive @client on FIELD';\n                var definition_1 = normalizeTypeDefs(typeDefs);\n                operation.setContext(function (_a) {\n                    var _b = _a.schemas, schemas = _b === void 0 ? [] : _b;\n                    return ({\n                        schemas: schemas.concat([{ definition: definition_1, directives: directives_1 }]),\n                    });\n                });\n            }\n            var isClient = hasDirectives(['client'], operation.query);\n            if (!isClient)\n                return forward(operation);\n            var resolvers = typeof clientStateConfig.resolvers === 'function'\n                ? clientStateConfig.resolvers()\n                : clientStateConfig.resolvers;\n            var server = removeClientSetsFromDocument(operation.query);\n            var query = operation.query;\n            var type = capitalizeFirstLetter((getMainDefinition(query) || {}).operation) || 'Query';\n            var resolver = function (fieldName, rootValue, args, context, info) {\n                if (rootValue === void 0) { rootValue = {}; }\n                var resultKey = info.resultKey;\n                var aliasedNode = rootValue[resultKey];\n                var preAliasingNode = rootValue[fieldName];\n                var aliasNeeded = resultKey !== fieldName;\n                if (aliasedNode !== undefined || preAliasingNode !== undefined) {\n                    return aliasedNode || preAliasingNode;\n                }\n                var resolverMap = resolvers[rootValue.__typename || type];\n                if (resolverMap) {\n                    var resolve = resolverMap[fieldName];\n                    if (resolve)\n                        return resolve(rootValue, args, context, info);\n                }\n                return ((aliasNeeded ? aliasedNode : preAliasingNode) ||\n                    (defaults || {})[fieldName]);\n            };\n            if (server)\n                operation.query = server;\n            var obs = server && forward\n                ? forward(operation)\n                : Observable.of({\n                    data: {},\n                });\n            return new Observable(function (observer) {\n                var complete = false;\n                var handlingNext = false;\n                obs.subscribe({\n                    next: function (_a) {\n                        var data = _a.data, errors = _a.errors;\n                        var observerErrorHandler = observer.error.bind(observer);\n                        var context = operation.getContext();\n                        handlingNext = true;\n                        graphql(resolver, query, data, context, operation.variables, {\n                            fragmentMatcher: fragmentMatcher,\n                        })\n                            .then(function (nextData) {\n                            observer.next({\n                                data: nextData,\n                                errors: errors,\n                            });\n                            if (complete) {\n                                observer.complete();\n                            }\n                            handlingNext = false;\n                        })\n                            .catch(observerErrorHandler);\n                    },\n                    error: observer.error.bind(observer),\n                    complete: function () {\n                        if (!handlingNext) {\n                            observer.complete();\n                        }\n                        complete = true;\n                    },\n                });\n            });\n        };\n        return StateLink;\n    }(ApolloLink))();\n};\n//# sourceMappingURL=index.js.map"]},"metadata":{},"sourceType":"module"}